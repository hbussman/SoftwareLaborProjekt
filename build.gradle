buildscript {
    repositories {
        mavenCentral()

        maven {
            url "https://plugins.gradle.org/m2/"
        }
    }
    dependencies {
        classpath("org.springframework.boot:spring-boot-gradle-plugin:2.0.5.RELEASE")
        //classpath "com.moowork.gradle:gradle-node-plugin:1.3.1"
    }
}

plugins {
    id "com.moowork.node" version "1.3.1"
}

apply plugin: 'java'
apply plugin: 'eclipse'
apply plugin: 'idea'
apply plugin: 'org.springframework.boot'
apply plugin: 'io.spring.dependency-management'
//apply plugin: 'com.moowork.node'

bootJar {
    baseName = 'gs-rest-service'
    version =  '0.1.0'
}

repositories {
    mavenCentral()
}

sourceCompatibility = 1.8
targetCompatibility = 1.8

dependencies {
    // Spring
    compile("org.springframework.boot:spring-boot-starter-web")
    testCompile('org.springframework.boot:spring-boot-starter-test')

    // JPA Data (We are going to use Repositories, Entities, Hibernate, etc...)
    implementation 'org.mariadb.jdbc:mariadb-java-client:2.4.1'
    compile 'org.springframework.boot:spring-boot-starter-data-jpa'
}

node {
    // Version of node to use.
    version = '11.12.0'

    // Version of npm to use.
    npmVersion = '6.9.0'

    // Version of Yarn to use.
    yarnVersion = '1.13.0'

    // Base URL for fetching node distributions (change if you have a mirror).
    distBaseUrl = 'https://nodejs.org/dist'

    // If true, it will download node using above parameters.
    // If false, it will try to use globally installed node.
    download = true

    // Set the work directory for unpacking node
    workDir = file("${project.buildDir}/nodejs")

    // Set the work directory for NPM
    npmWorkDir = file("${project.buildDir}/npm")

    // Set the work directory for Yarn
    yarnWorkDir = file("${project.buildDir}/yarn")

    // Set the work directory where node_modules should be located
    nodeModulesDir = file("${project.projectDir}")
}

/*
task buildTypeScript(type: NpmTask) {
    args = ['run', 'tsc']
}
*/

task ngServe(type: NpmTask) {
    args = ['run', 'ng', 'serve']
}

//ngServe.dependsOn(buildTypeScript)

/*
task myScript(type: NodeTask) {
    script = file('dist/out-tsc/web-src/main.js')
}
*/
